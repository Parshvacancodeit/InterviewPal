[
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What is the difference between div and span in HTML?",
    "reference_answer": "A div is a block level element used to group larger sections of content, taking the full width available, while a span is an inline element used for grouping small parts of text without breaking the flow of content.",
    "keywords": ["div", "span", "block level", "inline", "group", "content"]
  },
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What is the purpose of the alt attribute in images?",
    "reference_answer": "The alt attribute provides alternative text for an image when it cannot be displayed, and it also improves accessibility by allowing screen readers to describe the image to visually impaired users.",
    "keywords": ["alt", "attribute", "image", "accessibility", "alternative text", "screen reader"]
  },
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What are semantic HTML elements?",
    "reference_answer": "Semantic HTML elements are elements that clearly describe their meaning both to the browser and to developers, such as header, article, footer, nav, and section, which make the structure more understandable.",
    "keywords": ["semantic", "meaning", "header", "article", "footer", "section", "structure"]
  },
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What is the difference between id and class attributes?",
    "reference_answer": "The id attribute uniquely identifies a single HTML element on a page, whereas the class attribute can be applied to multiple elements to group them together for styling or scripting purposes.",
    "keywords": ["id", "class", "unique", "multiple", "style", "group"]
  },
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What is the difference between block level and inline elements?",
    "reference_answer": "Block level elements take up the full available width and start on a new line, while inline elements only take up as much width as their content and remain in the same line as surrounding text.",
    "keywords": ["block level", "inline", "width", "line", "content", "layout"]
  },
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What is the difference between ordered and unordered lists in HTML?",
    "reference_answer": "An ordered list displays items in a specific sequence with numbers, while an unordered list displays items with bullet points without any particular order.",
    "keywords": ["ordered list", "unordered list", "sequence", "numbers", "bullets", "items"]
  },
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What does the title tag do in HTML?",
    "reference_answer": "The title tag defines the title of the document, which appears in the browser's title bar or tab, and is also used by search engines as the main heading in search results.",
    "keywords": ["title", "tag", "browser", "tab", "search engine", "heading"]
  },
  {
    "tech": "html",
    "difficulty": "Easy",
    "question": "What is the purpose of the placeholder attribute in forms?",
    "reference_answer": "The placeholder attribute displays temporary hint text inside an input field to indicate what kind of value should be entered, disappearing when the user types something.",
    "keywords": ["placeholder", "input", "hint", "form", "text", "field"]
  },

  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "What is the difference between relative, absolute, and fixed paths in HTML links?",
    "reference_answer": "Relative paths point to a file based on the location of the current HTML file, absolute paths include the full URL to the resource, and fixed paths are rooted from the website's domain root directory.",
    "keywords": ["relative path", "absolute path", "fixed path", "url", "directory", "location"]
  },
  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "How do meta tags affect SEO and page rendering?",
    "reference_answer": "Meta tags provide metadata such as description, keywords, and viewport settings, which help search engines understand the content of the page and also control how the page is displayed on different devices.",
    "keywords": ["meta tag", "seo", "description", "keywords", "viewport", "search engine"]
  },
  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "What is the difference between HTML and XHTML?",
    "reference_answer": "XHTML is a stricter XML-based version of HTML that enforces rules like closing all tags, using lowercase element names, and properly nesting elements, making it more consistent but less forgiving than HTML.",
    "keywords": ["xhtml", "xml", "strict", "closed tags", "nested", "lowercase"]
  },
  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "What is the difference between GET and POST methods in HTML forms?",
    "reference_answer": "GET sends form data as URL parameters visible in the browser's address bar, suitable for non-sensitive small data, while POST sends data in the request body, keeping it hidden from the URL and suitable for sensitive or large data.",
    "keywords": ["get", "post", "form", "request", "url", "data"]
  },
  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "What is the difference between defer and async attributes in script tags?",
    "reference_answer": "Async downloads and executes a script immediately as it becomes available without waiting for HTML parsing to complete, while defer downloads during parsing but executes only after the HTML is fully parsed.",
    "keywords": ["defer", "async", "script", "parsing", "execution", "load"]
  },
  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "What are the differences between HTML5 and earlier versions of HTML?",
    "reference_answer": "HTML5 introduced new semantic elements like header, footer, and article, added multimedia support for audio and video without plugins, and improved support for APIs like canvas and local storage.",
    "keywords": ["html5", "semantic", "multimedia", "audio", "video", "local storage"]
  },
  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "What is the difference between inline, internal, and external CSS in HTML?",
    "reference_answer": "Inline CSS applies styles directly within an element's style attribute, internal CSS uses a style block within the HTML head, and external CSS links to a separate stylesheet file.",
    "keywords": ["inline css", "internal css", "external css", "style", "stylesheet", "head"]
  },
  {
    "tech": "html",
    "difficulty": "Medium",
    "question": "What is the difference between absolute and relative positioning in HTML elements?",
    "reference_answer": "Absolute positioning places an element relative to its nearest positioned ancestor, while relative positioning moves an element relative to its original position in the normal document flow.",
    "keywords": ["absolute", "relative", "positioning", "element", "layout", "flow"]
  },

  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "How does the browser render an HTML page from request to display?",
    "reference_answer": "The browser sends an HTTP request to the server, receives the HTML document, parses it into a DOM tree, applies CSS to create a render tree, executes JavaScript, and then paints the final layout to the screen.",
    "keywords": ["render", "dom", "css", "paint", "parse", "http"]
  },
  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "Explain the difference between progressive rendering and full-page rendering.",
    "reference_answer": "Progressive rendering displays parts of a page as they are loaded, improving perceived performance, while full-page rendering waits for all resources to load before displaying anything to the user.",
    "keywords": ["progressive rendering", "full page rendering", "performance", "load", "display"]
  },
  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "What is the difference between a server-side include and a client-side include?",
    "reference_answer": "Server-side includes are processed on the server before the HTML is sent to the browser, while client-side includes are loaded and inserted into the page after it has loaded, usually via JavaScript.",
    "keywords": ["server side", "client side", "include", "javascript", "render"]
  },
  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "How do you optimize HTML for faster page loading?",
    "reference_answer": "Optimizing HTML involves reducing file size, removing unnecessary whitespace, using semantic tags for efficiency, minimizing DOM complexity, and deferring non-essential scripts.",
    "keywords": ["optimize", "minimize", "semantic", "dom", "defer", "load time"]
  },
  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "Explain critical rendering path and how HTML affects it.",
    "reference_answer": "The critical rendering path is the sequence of steps the browser takes to convert HTML, CSS, and JavaScript into pixels on the screen. Poor HTML structure or blocking scripts can slow this process significantly.",
    "keywords": ["critical rendering path", "html", "css", "javascript", "delay", "pixels"]
  },
  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "What are ARIA attributes and how do they help in HTML?",
    "reference_answer": "ARIA attributes provide additional information to assistive technologies, making web content more accessible to users with disabilities, especially for interactive elements.",
    "keywords": ["aria", "accessibility", "assistive", "attributes", "interactive", "disabilities"]
  },
  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "What is the difference between HTML parsing and DOM construction?",
    "reference_answer": "HTML parsing is the process of reading and interpreting the HTML code, while DOM construction is building a structured representation of the page elements based on that parsed code.",
    "keywords": ["html parsing", "dom construction", "interpret", "structure", "elements", "page"]
  },
  {
    "tech": "html",
    "difficulty": "Hard",
    "question": "How does lazy loading work in HTML for images and iframes?",
    "reference_answer": "Lazy loading defers the loading of images or iframes until they are about to enter the viewport, improving page load speed and reducing unnecessary data usage.",
    "keywords": ["lazy loading", "image", "iframe", "viewport", "speed", "data"]
  }
]
